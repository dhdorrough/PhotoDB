{ SMExport suite
  TSMExportToLDIF component: data export into Mozilla LDIF-file (LDAP/Lightweight Data Interchange Format)

  Copyright (C) 1998-2005, written by Mike Shkolnik, Scalabium Software
  E-Mail:  smexport@scalabium.com
  WEB: http://www.scalabium.com
}
unit SME2LDIF;

interface

uses
  Classes, Graphics, DB, SME2Cell, ExportDS, SMEEngine;

type
  TSMExportToLDIF = class(TSMExportToCellFile)
  private
    { Private declarations }
    FObjectClass: string;
  protected
    { Protected declarations }
    function GetFieldStr(Field: TField): string; override;
  public
    { Public declarations }
    procedure WriteFileBegin; override;

    procedure WriteRowStart(IsAddedTitle: Boolean); override;
    procedure WriteRowEnd(IsAddedTitle: Boolean); override;
    procedure WriteData(fld: TField; CellType: TCellType; ARow, ACol: Integer; AString: {Short}String; al: TAlignment; font: TFont; color: TColor); override;

    constructor Create(AOwner: TComponent); override;
    function Extension: string; override;
  published
    { Published declarations }
    property ObjectClass: string read FObjectClass write FObjectClass;
  end;

implementation

uses Windows, SysUtils, SMEMIME;

{ TSMExportToLDIF }
constructor TSMExportToLDIF.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);

  TableType := teLDIF;
  ObjectClass := 'organization';
end;

function TSMExportToLDIF.Extension: string;
begin
  Result := '.LDIF'
end;

procedure TSMExportToLDIF.WriteFileBegin;
begin
  inherited;

  WriteString('#This LDIF file was generated by ' + KeyGenerator + ' and the LDIF destination handler.'#13#10 +
              'version: 1'#13#10#13#10)
end;

function TSMExportToLDIF.GetFieldStr(Field: TField): string;

  function IsAlfaChars(strStr: string): Boolean;
  type
    TAlfaSet = Set of Char;
  const
    AlfaSet: TAlfaset = ['a'..'z', 'A'..'Z', '0'..'9',
                         ' ', '-', '+', '*', '/', '\', '.', ',', ':',
                         '''', '"', '#', '@', '?', '<', '>', '!', '$', '%', '^', '&', '8', '(', ')'];
  var
    intIndex, intLen: Integer;
  begin
    intLen := Length(strStr);
    intIndex := 1;
    while (intIndex <= intLen) and
          (strStr[intIndex] in AlfaSet) do
      Inc(intIndex);
    Result := (intIndex > intLen) and (intLen > 0);
  end;

begin
  Result := inherited GetFieldStr(Field);

  if (Assigned(Field) and Field.IsBlob) or
     ((Result <> '') and
       ((Result[1] in [' ', ';']) or not IsAlfaChars(Result))) then
    Result := ':' + Encode64(Result)
end;

procedure TSMExportToLDIF.WriteRowStart(IsAddedTitle: Boolean);
begin
  inherited;

  if not IsAddedTitle then
    WriteString('dn:'#13#10 +
                'objectclass: top'#13#10 +
                'objectclass: ' + ObjectClass + #13#10)
end;

procedure TSMExportToLDIF.WriteRowEnd(IsAddedTitle: Boolean);
begin
  inherited;

  if not IsAddedTitle then
    WriteString(#13#10#13#10);
end;

procedure TSMExportToLDIF.WriteData(fld: TField; CellType: TCellType; ARow, ACol: Integer; AString: {Short}String; al: TAlignment; font: TFont; color: TColor);
var
  strTag: string;
begin
  inherited;

  if (AString <> '') then
  begin
    if Assigned(fld) then
      strTag := fld.FieldName
    else
      if IsDataArea then
        strTag := Columns[ACol].FieldName
      else
        strTag := 'LINE' + IntToStr(ARow);
    WriteString(strTag + ':' + AString + #13#10)
  end
end;

end.

